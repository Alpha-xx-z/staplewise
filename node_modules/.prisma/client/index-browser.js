
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  phone: 'phone',
  role: 'role',
  companyName: 'companyName',
  city: 'city',
  street1: 'street1',
  street2: 'street2',
  pincode: 'pincode',
  state: 'state',
  registrarName: 'registrarName',
  gstin: 'gstin',
  yearEstablished: 'yearEstablished',
  isActive: 'isActive',
  isVerified: 'isVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  buildingNumber: 'buildingNumber',
  buildingName: 'buildingName',
  streetAddress1: 'streetAddress1',
  streetAddress2: 'streetAddress2',
  landmark: 'landmark',
  area: 'area',
  city: 'city',
  district: 'district',
  state: 'state',
  pincode: 'pincode',
  country: 'country',
  latitude: 'latitude',
  longitude: 'longitude',
  addressType: 'addressType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  documentType: 'documentType',
  documentName: 'documentName',
  documentNumber: 'documentNumber',
  fileUrl: 'fileUrl',
  fileName: 'fileName',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  isVerified: 'isVerified',
  verificationStatus: 'verificationStatus',
  verificationNotes: 'verificationNotes',
  uploadedAt: 'uploadedAt',
  verifiedAt: 'verifiedAt',
  expiryDate: 'expiryDate'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  sellerId: 'sellerId',
  name: 'name',
  category: 'category',
  grade: 'grade',
  description: 'description',
  specifications: 'specifications',
  specificationsAndGrade: 'specificationsAndGrade',
  qualityAssurance: 'qualityAssurance',
  packagingAndDelivery: 'packagingAndDelivery',
  pricePerKg: 'pricePerKg',
  minimumOrderQuantity: 'minimumOrderQuantity',
  unit: 'unit',
  location: 'location',
  deliveryTime: 'deliveryTime',
  packagingType: 'packagingType',
  primaryImage: 'primaryImage',
  additionalImages: 'additionalImages',
  isActive: 'isActive',
  isVerified: 'isVerified',
  verificationStatus: 'verificationStatus',
  slug: 'slug',
  tags: 'tags',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QueryScalarFieldEnum = {
  id: 'id',
  type: 'type',
  quantity: 'quantity',
  message: 'message',
  companyName: 'companyName',
  contactName: 'contactName',
  email: 'email',
  phone: 'phone',
  pincode: 'pincode',
  gst: 'gst',
  status: 'status',
  priority: 'priority',
  assignedToId: 'assignedToId',
  assignedAt: 'assignedAt',
  response: 'response',
  responseAt: 'responseAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  productId: 'productId',
  userId: 'userId'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  orderNumber: 'orderNumber',
  totalAmount: 'totalAmount',
  totalQuantity: 'totalQuantity',
  currency: 'currency',
  status: 'status',
  paymentStatus: 'paymentStatus',
  shippingAddress: 'shippingAddress',
  billingAddress: 'billingAddress',
  trackingNumber: 'trackingNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  shippedAt: 'shippedAt',
  deliveredAt: 'deliveredAt',
  buyerId: 'buyerId'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  quantity: 'quantity',
  pricePerKg: 'pricePerKg',
  totalPrice: 'totalPrice',
  orderId: 'orderId',
  productId: 'productId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  SALES: 'SALES',
  BUYER: 'BUYER',
  SELLER: 'SELLER'
};

exports.AddressType = exports.$Enums.AddressType = {
  BUSINESS: 'BUSINESS',
  RESIDENTIAL: 'RESIDENTIAL',
  WAREHOUSE: 'WAREHOUSE',
  FACTORY: 'FACTORY'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  GST_CERTIFICATE: 'GST_CERTIFICATE',
  PAN_CARD: 'PAN_CARD',
  INCORPORATION_CERTIFICATE: 'INCORPORATION_CERTIFICATE',
  MOA_AOA: 'MOA_AOA',
  UDYAM_CERTIFICATE: 'UDYAM_CERTIFICATE',
  IEC_CERTIFICATE: 'IEC_CERTIFICATE',
  AADHAR_CARD: 'AADHAR_CARD',
  PASSPORT: 'PASSPORT',
  DRIVING_LICENSE: 'DRIVING_LICENSE',
  VOTER_ID: 'VOTER_ID',
  BANK_STATEMENT: 'BANK_STATEMENT',
  CANCELLED_CHEQUE: 'CANCELLED_CHEQUE',
  TRADE_LICENSE: 'TRADE_LICENSE',
  FSSAI_LICENSE: 'FSSAI_LICENSE',
  ISO_CERTIFICATE: 'ISO_CERTIFICATE',
  PRODUCT_CERTIFICATE: 'PRODUCT_CERTIFICATE',
  QUALITY_CERTIFICATE: 'QUALITY_CERTIFICATE',
  LAB_REPORT: 'LAB_REPORT',
  OTHER: 'OTHER'
};

exports.VerificationStatus = exports.$Enums.VerificationStatus = {
  PENDING: 'PENDING',
  IN_REVIEW: 'IN_REVIEW',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  REQUIRES_RESUBMISSION: 'REQUIRES_RESUBMISSION'
};

exports.ProductCategory = exports.$Enums.ProductCategory = {
  CASHEWS: 'CASHEWS',
  CLOVES: 'CLOVES',
  CHILLIES: 'CHILLIES',
  STAR_ANISE: 'STAR_ANISE',
  PEPPER: 'PEPPER',
  CINNAMON: 'CINNAMON',
  OTHER_SPICES: 'OTHER_SPICES'
};

exports.QueryType = exports.$Enums.QueryType = {
  BUY: 'BUY',
  SELL: 'SELL',
  GENERAL_INQUIRY: 'GENERAL_INQUIRY',
  BULK_ORDER: 'BULK_ORDER',
  CUSTOM_REQUIREMENT: 'CUSTOM_REQUIREMENT'
};

exports.QueryStatus = exports.$Enums.QueryStatus = {
  PENDING: 'PENDING',
  ASSIGNED: 'ASSIGNED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  REJECTED: 'REJECTED',
  CANCELLED: 'CANCELLED'
};

exports.Priority = exports.$Enums.Priority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  PROCESSING: 'PROCESSING',
  PACKED: 'PACKED',
  SHIPPED: 'SHIPPED',
  OUT_FOR_DELIVERY: 'OUT_FOR_DELIVERY',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED',
  RETURNED: 'RETURNED',
  REFUNDED: 'REFUNDED'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED',
  PARTIALLY_PAID: 'PARTIALLY_PAID'
};

exports.Prisma.ModelName = {
  User: 'User',
  Address: 'Address',
  Document: 'Document',
  Product: 'Product',
  Query: 'Query',
  Order: 'Order',
  OrderItem: 'OrderItem'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
